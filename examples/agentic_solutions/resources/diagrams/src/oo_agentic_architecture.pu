@startuml oo_agentic_architecture
' Hide the icon in the top left corner for cleaner diagrams
skinparam classAttributeIconSize 0

' Abstract base classes
abstract class BaseAgent {
  - model_name: str
  - messages: ChatMessages
  - tool_manager: Optional<ToolManager>
  - logger: Logger
  - language_model_interface: LanguageModelInterface
  + __init__(developer_prompt: str, model_name: str, logger?, language_model_interface?: LanguageModelInterface)
  + setup_tools(): void {abstract}
  + add_context(content: str): void
  + add_message(content: str): void
  + task(user_task: str, tool_call_enabled: bool, return_tool_response_as_is: bool): str
}

abstract class ToolInterface {
  + get_definition(): Dict[str, Any] {abstract}
  + run(arguments: Dict[str, Any]): str {abstract}
}

abstract class LanguageModelInterface {
  + generate_completion(model: str, messages: List<Dict[str, str]], tools?: List<Dict[str, Any]]): Dict[str, Any> {abstract}
}

' Concrete classes
class ChatMessages {
  - messages: List<Dict[str, str]>
  + __init__(developer_prompt: str)
  + add_developer_message(content: str): void
  + add_user_message(content: str): void
  + add_assistant_message(content: str): void
  + get_messages(): List<Dict[str, str]>
}

class ToolManager {
  - tools: Dict[str, ToolInterface>
  - logger: Logger
  - language_model_interface: LanguageModelInterface
  + __init__(logger?, language_model_interface?: LanguageModelInterface)
  + register_tool(tool: ToolInterface): void
  + get_tool_definitions(): List<Dict[str, Any]>
  + handle_tool_call_sequence(response, return_tool_response_as_is: bool, messages: ChatMessages, model_name: str): str
}

class OpenAILanguageModel {
  - openai_client: OpenAI
  - logger: Logger
  + __init__(openai_client?, api_key?: str, logger?)
  + generate_completion(model: str, messages: List<Dict[str, str]], tools?: List<Dict[str, Any]]): Dict[str, Any>
}

class OpenAIClientFactory {
  + create_client(api_key?: str): OpenAI
  - _resolve_api_key(api_key?: str): str
}

' Relationships
BaseAgent --> ChatMessages : uses
BaseAgent --> LanguageModelInterface : uses
BaseAgent --> ToolManager : optionally uses

ToolManager --> "0..*" ToolInterface : manages
ToolManager --> ChatMessages : uses
ToolManager --> LanguageModelInterface : uses

OpenAILanguageModel ..|> LanguageModelInterface
OpenAILanguageModel --> OpenAIClientFactory : uses

@enduml